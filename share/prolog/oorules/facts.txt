This file documents the facts currently exported from OOAnalyzer in human readable terms.

returnsSelf(Method).

  Method returns ECX in EAX.

noCallsBefore(Method).

  Method meets C++ ordering expectations for a constructor (e.g. no calls before it).

noCallsAfter(Method).

  Method meets C++ ordering expectations for a destructor (e.g. no calls after it).

uninitializedReads(Method).

  Method has uninitialized reads that are often (but not always) indicative that Method is not
  a constructor.  Specifically, the method reads members from the object that are not
  initialized in the local evaluation context.  The most significant (only?) case that this
  algorithm does not test for is reads of members that were initialized by a call to another
  method such as a parent constructor.

thisCallMethod(Address, ThisPtr, Certainty).

  The method at Address appears to be a thiscall method.  The ThisPtr argument is the hash of
  the apparent this-pointer, and the certainty field communicates our confidence.  A value of
  'certain' means that only thiscall matched the calling convention.  A value of 'uncertain'
  means that other calling conventions were possible interpretations as well.

insnCallsDelete(Insn, Func, ThisPtr).

  Instruction Insn in Function Func calls the delete method.  The ThisPtr argument is the hash
  of the this-pointer that was passed to the delete method.

possibleVFTableWrite(Insn, Method, Offset, VFTable).

  Instruction Insn in Method writes a possible virtual function table pointer (VFTable) at Offset
  into the current object for the Method.

possibleVBTableWrite(Insn, Method, Offset, VBTable).

  Instruction Insn in Method writes a possible virtual base table pointer (VBTable) at Offset
  into the current object for the Method.

initialMemory(Address, Value).

  The Address containts the Value in the program's initialized memory.  Typically, the value is
  an entry in a possible virtual function table or a possible virtual base table.

funcOffset(Insn, Caller, Callee, Offset).

  Instruction Insn in method Caller calls Callee passing Offset of the current object in Caller
  as the this-pointer to Callee.

methodMemberAccess(Insn, Method, Offset, Size).

  Instruction Insn in Method accesses the current Size bytes of memory at Offset in the
  current this-pointer.

thisPtrAllocation(Insn, Function, ThisPtr, Type, Size).

  Instruction Insn in Function allocates Size bytes of memory of Type and assigns it to the
  specified ThisPtr. Type is one of: "type_Heap", "type_Unknown", "type_Stack", "type_Global",
  or "type_Param".  It's likely that only "type_Heap" is exported as a Prolog fact currently.

thisPtrUsage(Insn, Function, ThisPtr, Method).

  Instruction Insn in Function calls Method on the object represented by ThisPtr.  The ThisPtr
  field can be tested for equivalence to other this pointers, but is otherwise opaque (it's a
  hash of the TreeNode values representing the object pointer).

possibleVirtualFunctionCall(Insn, Function, ThisPtr, VTableOffset, VFuncOffset).

  Instruction Insn in Function makes a call that structurally resembles a virtual function
  call.  VTableOffset is the offset in the object where the virtual function table is located,
  and VFuncOffset is the offset into the virtual function table (provided that call is in fact
  a virtual function call).

thisPtrOffset(ThisPtr1, Offset, ThisPtr2).

  When Offset is added to ThisPtr1, it yields ThisPtr2.  Typically this means that ThisPtr2 is
  a pointer to an embedded object of base class at the given offset within ThisPtr1.

purecall(Address).

  The method/function/import at Address is an implementation of the purecall stub that Visual
  Studio uses to mark virtual methods on abstract base classes that do not have implementations.

rTTICompleteObjectLocator(Pointer, Address, TDAddress, CHDAddress, Offset, CDOffset)

  There's a pointer to an RTTI Complete Object Locator data structure at Pointer (address just
  before the VFTable) which points to Address which is where the RTTI Complete Object Locator
  data structure is located in memory.  TDAddress and CHDAddress are the addresses of the
  corresponding Type Descriptor and Class Hierarchy Descriptor respectively.  Offset is
  described as the offset of this VFTable in the class.  CDOffset is described as the
  constructor displacement offset (?).  This object occurs once per VFTable (not once per
  class).

rTTITypeDescriptor(Address, VFTable, Name)

  There's an RTTI Type Descriptor at Address.  The virtual function table is at address VFTable
  and the Name of the class is specified (in the mangled name format).

rTTIClassHierarchyDescriptor(Address, Attributes, BaseClasses)

  There's an RTTI Class Hierarchy Descriptor at Address. The Attributes are reported to be two
  individual bits.  If bit zero is set there is multiple inheritance.  If bit one set, there is
  virtual inheritance.  BaseClasses is a list of RTTI Base Class Descriptor addresses.

rTTIBaseClassDescriptor(Address, TypeDescriptorAddress, NumBases, WhereM, WhereP, WhereV, 
                        Attributes, ClassHierarchyDescriptor)

  There's an RTTI Base Class Descriptor at Address. The type of the base class is described by
  the RTTI Type Descriptor at TypeDescriptorAddress.  WhereM, WhereP and WhereV describe the
  location of the base class relative to the derived class.  WhereM is the member displacement,
  WhereP is the vtable displacement, WhereV is the displacement inside the vtable.  The class
  hierarchy descriptor parameter is an undocumented extension that appears to describe this
  particular base class' hierarchy.

rTTIInformation(RTTIAddress, ClassName).

  There's a RTTI data structure at RTTIAddress.  The class name provided by the RTTI data
  structure is ClassName.  Perhaps this fact should be changed so that the virtual function
  table address is used instead (because it's always one pointer size greater than RTTIAddress.

symbolGlobalObject(Address, ClassName, VariableName).

  There's a global object at Address of type ClassName with the name VariableName.  This fact
  is currently unused because it's unclear how the ClassName/Address can be connected to other
  facts, and we're not currently reporting global object instances.

symbolClass(Address, ClassName).

  The method at the Address is known to be on the class represented by ClassName.  This
  information comes from symbols such as imports by name, but might also come from embedded
  debugging information in other architectures and file formats.

  Ideally the ClassName would be represented in the same mangled name format as the names that
  appear in the RTTI data structures, but that's probably not convenient in the short term.  In
  the meantime, the only guarantee would be that two classes with the same name are the same
  class.

symbolProperty(Address, property).

  The method at the Address is known to have the stated property.  Property would be one of
  'constructor', 'realDestructor', 'deletingDestructor', or 'virtual'. 

thunk(Thunk, Function).

  The instruction at Thunk is an unconditional jump to Function.

callingConvention(Function, Convention).

  The Function can be the calling Convention.

funcParameter(Function, Position, SVHash).

  The Function takes as a parameter in Position the symbolic value represented by SVHash.  The
  Position will be a number representing the stack delta for stack parameters, or the name of
  the register for register parameters.

funcReturn(Function, Position, SVHash).

  The Function returns the symbolic value represented by SVHash in Position.  Position is
  always a register name, and is typically 'eax'.

callParameter(Instruction, Function, Position, SVHash).

  The call Instruction in Function passes the symbolic value SVHash in Position. The Position
  will be a number representing the stack delta for stack parameters, or the name of the
  register for register parameters.

callReturn(Instruction, Function, Position, SVHash).

  The call Instruction in Function returns the symbolic value represented by SVHash in
  Position.  Position is always a register name, and is typically 'eax'.

callTarget(Instruction, Function, Target).

  The call Instruction in Function calls to the Target address.

/* Local Variables:   */
/* mode: text         */
/* fill-column:    95 */
/* comment-column: 0  */
/* End:               */
