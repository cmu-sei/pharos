% A module for reporting the results of object matching.  This probably won't be used in the
% production tool, but it should be useful for interactive debugging of the Prolog
% infrastructure, and perhaps more importantly, it serves to define what an "answer" is for
% when it comes time to import the results back into OOAnalyzer.

:- import maplist/2 from swi.

% Cory's not sure what this is for but he copied it from [rulerun].
:- import error_writeln/1 from standard.
:- dynamic default_user_error_handler/1.
default_user_error_handler(X) :-
    error_writeln(['Aborting due to error: ', X]),halt(1).

psolve_no_halt(X) :-
    load_dync(X),
    (loginfo('Guessing is '), guessingDisabled -> loginfoln('disabled.'); loginfoln('enabled.')),
    (loginfo('Profiling is '), profilingEnabled -> loginfoln('enabled.'); loginfoln('disabled.')),
    (loginfo('RTTI is '), rTTIEnabled -> loginfoln('enabled.'); loginfoln('disabled.')),
    profilingEnabled ->
        (timed_call(solve, [repeating(60000, show_progress)]), reportResults);
    ((solve, reportResults)).

psolve(X) :- psolve_no_halt(X), halt.

% Cory's no longer sure what we were catching.  But if we need to catch something again, we
% should do it here by wrapping psolve(X) and psolve_no_halt() with some code like:
%
% catch((something), E, somehow_report_error)

writeHelper([]).
writeHelper([H]) :-
    !,
    writeHex(H).
writeHelper([H|T]) :-
    writeHex(H), write(', '), writeHelper(T).

writeList(L) :-
    write('['), writeHelper(L), write(']').

% This definition of progress is for when we're NOT running from within OOAnalyzer, which is
% probably the same circumstances where we want this reporting module.
progress(N) :-
  loginfo('There are '), loginfo(N), loginfoln(' known facts.').

% In the OOAnalyzer binary, these are passed to a proper Pharos logging stream.
log(Importance, Message) :-
    (numericLogLevel(Importance, MsgNumber),
     logLevel(LogNumber),
     MsgNumber =< LogNumber
    ) -> writeHex(Message) ; true.
logln(Importance, Message) :-
    (numericLogLevel(Importance, MsgNumber),
     logLevel(LogNumber),
     MsgNumber =< LogNumber
    ) -> writelnHex(Message) ; true.

% ============================================================================================
% Virtual Function Tables
% ============================================================================================

reportFinalVFTable((V, C, L, A, N)) :-
    %finalVFTable(V, C, L, A, N),
    write('finalVFTable('),
    writeHex(V), write(', '),
    writeHex(C), write(', '),
    writeHex(L), write(', '),
    writeHex(A), write(', '),
    write('\''), writeHex(N), write('\''), writeln(').').

reportVFTables :-
    setof((V, C, L, A, N), finalVFTable(V, C, L, A, N), Set),
    !,
    maplist(reportFinalVFTable, Set).
reportVFTables.

reportFinalVFTableEntry((A, O, M)) :-
    write('finalVFTableEntry('),
    writeHex(A), write(', '),
    writeHex(O), write(', '),
    writeHex(M), writeln(').').

reportVFTableEntries :-
    setof((A, O, M), finalVFTableEntry(A, O, M), Set),
    !,
    maplist(reportFinalVFTableEntry, Set).
reportVFTableEntries.

% ============================================================================================
% Virtual Base Tables
% ============================================================================================

reportFinalVBTable((V, C, S, O)) :-
    %finalVBTable(V, C, S, O),
    write('finalVBTable('),
    writeHex(V), write(', '),
    writeHex(C), write(', '),
    writeHex(S), write(', '),
    writeHex(O), writeln(').').

reportVBTables :-
    setof((V, C, S, O), finalVBTable(V, C, S, O), Set),
    !,
    maplist(reportFinalVBTable, Set).
reportVBTables.

reportFinalVBTableEntry((A, O, V)) :-
    write('finalVBTableEntry('),
    writeHex(A), write(', '),
    writeHex(O), write(', '),
    writeHex(V), writeln(').').

reportVBTableEntries :-
    setof((A, O, V), finalVBTableEntry(A, O, V), Set),
    !,
    maplist(reportFinalVBTableEntry, Set).
reportVBTableEntries.

% ============================================================================================
% Class Definitions
% ============================================================================================

reportFinalClass((C, V, S, L, R, M)) :-
    %finalClass(C, V, S, L, R, M),
    write('finalClass('),
    writeHex(C), write(', '),
    writeHex(V), write(', '),
    writeHex(S), write(', '),
    writeHex(L), write(', '),
    writeHex(R), write(', '),
    writeList(M), writeln(').').

reportClasses :-
    setof((C, V, S, L, R, M), finalClass(C, V, S, L, R, M), Set),
    !,
    maplist(reportFinalClass, Set).
reportClasses.

% ============================================================================================
% Resolved Virtual Function Calls
% ============================================================================================

reportFinalResolvedVirtualCall((I, V, T)) :-
    write('finalResolvedVirtualCall('),
    writeHex(I), write(', '),
    writeHex(V), write(', '),
    writeHex(T), writeln(').').

reportResolvedVirtualCalls :-
    setof((I, V, T), finalResolvedVirtualCall(I, V, T), Set),
    !,
    maplist(reportFinalResolvedVirtualCall, Set).
reportResolvedVirtualCalls.

% ============================================================================================
% Embedded objects.
% ============================================================================================

reportFinalEmbeddedObject((C, O, E, X)) :-
    %finalEmbeddedObject(C, O, E, X),
    write('finalEmbeddedObject('),
    writeHex(C), write(', '),
    writeHex(O), write(', '),
    writeHex(E), write(', '),
    writeHex(X), writeln(').').

reportEmbeddedObjects :-
    setof((C, O, E, X), finalEmbeddedObject(C, O, E, X), Set),
    !,
    maplist(reportFinalEmbeddedObject, Set).
reportEmbeddedObjects.

% ============================================================================================
% Inheritance relationships
% ============================================================================================

reportFinalInheritance((D, B, O, C, V)) :-
    %finalInheritance(D, B, O, C, V),
    write('finalInheritance('),
    writeHex(D), write(', '),
    writeHex(B), write(', '),
    writeHex(O), write(', '),
    writeHex(C), write(', '),
    writeHex(V), writeln(').').

reportInheritances :-
    setof((D, B, O, C, V), finalInheritance(D, B, O, C, V), Set),
    !,
    maplist(reportFinalInheritance, Set).
reportInheritances.

% ============================================================================================
% Definitions of members on classes.
% ============================================================================================

reportFinalMember((C, O, S, L)) :-
    % this call to finalMember is redundant
    % finalMember(C, O, S, L),
    write('finalMember('),
    writeHex(C), write(', '),
    writeHex(O), write(', '),
    writeList(S), write(', '),
    writeHex(L), writeln(').').

reportMembers :-
    setof((C, O, S, L), finalMember(C, O, S, L), Set),
    !,
    maplist(reportFinalMember, Set).
reportMembers.

% ============================================================================================
% Definitions of members on classes.
% ============================================================================================

reportFinalMemberAccess((C, O, S, E)) :-
    write('finalMemberAccess('),
    writeHex(C), write(', '),
    writeHex(O), write(', '),
    writeHex(S), write(', '),
    writeList(E), writeln(').').

reportMemberAccesses :-
    setof((C, O, S, E), finalMemberAccess(C, O, S, E), Set),
    !,
    maplist(reportFinalMemberAccess, Set).
reportMemberAccesses.

% ============================================================================================
% Method Properties
% ============================================================================================

reportFinalMethodProperty((M, P, C)) :-
    write('finalMethodProperty('),
    writeHex(M), write(', '),
    writeHex(P), write(', '),
    writeHex(C), writeln(').').

reportMethodProperties :-
    setof((M, P, C), finalMethodProperty(M, P, C), Set),
    !,
    maplist(reportFinalMethodProperty, Set).
reportMethodProperties.

% ============================================================================================
% Some thunk analysis (debugging?)
% ============================================================================================

reportEventualThunk((T, F)) :-
    write('eventualThunk('),
    writeHex(T), write(', '),
    writeHex(F), writeln(').').

reportEventualThunks :-
    setof((T, F), eventualThunk(T, F), Set),
    !,
    maplist(reportEventualThunk, Set).
reportEventualThunks.

reportUniqueThunk((T, F)) :-
    write('uniqueThunk('),
    writeHex(T), write(', '),
    writeHex(F), writeln(').').

reportUniqueThunks :-
    setof((T, F), uniqueThunk(T, F), Set),
    !,
    maplist(reportUniqueThunk, Set).
reportUniqueThunks.

reportConflictedThunk((T, O, F)) :-
    write('conflictedThunk('),
    writeHex(T), write(', '),
    writeHex(O), write(', '),
    writeHex(F), writeln(').').

reportConflictedThunks :-
    setof((T, O, F), conflictedThunk(T, O, F), Set),
    !,
    maplist(reportConflictedThunk, Set).
reportConflictedThunks.

% ============================================================================================
% The main reporting rule.
% ============================================================================================

reportResults :-
    reportGuessedStatistics,
    writeln('% Prolog results autogenerated by OOAnalyzer.'),
    reportVFTables,
    reportVFTableEntries,
    reportVBTables,
    reportVBTableEntries,
    reportClasses,
    reportResolvedVirtualCalls,
    reportEmbeddedObjects,
    reportInheritances,
    reportMembers,
    reportMemberAccesses,
    reportMethodProperties,
    %reportEventualThunks,
    %reportUniqueThunks,
    %reportConflictedThunks,
    % Cory would like for this line to go to stderr?
    writeln('% Object detection reporting complete.').

% ============================================================================================
% Rules for counting guesses at the end of execution.
% ============================================================================================

:- import length/2 from basics.

% Woot! Cory figured it out to count arbitary predicates all by himself! ;-)
count(Pred/Arity, N) :-
    functor(OldTerm, Pred, Arity),
    findall(1, OldTerm, L),
    length(L, N).

% Print how many conclusions were guessed versus how many were reasoned.  We could also report
% the actual specific guesssed facts if we wanted.
reportGuessedStatistics :-
    count(guessedMethod/1, GM), count(factMethod/1, FM),
    count(guessedNOTMethod/1, GNM), count(factNOTMethod/1, FNM),
    loginfo('Guessed methods '), loginfo(GM), loginfo(' of '), loginfo(FM),
    loginfo(', NOT: '), loginfo(GNM), loginfo(' of '), loginfoln(FNM),

    count(guessedConstructor/1, GC), count(factConstructor/1, FC),
    count(guessedNOTConstructor/1, GNC), count(factNOTConstructor/1, FNC),
    loginfo('Guessed constructors '), loginfo(GC), loginfo(' of '), loginfo(FC),
    loginfo(', NOT: '), loginfo(GNC), loginfo(' of '), loginfoln(FNC),

    count(guessedRealDestructor/1, GRD), count(factRealDestructor/1, FRD),
    count(guessedNOTRealDestructor/1, GNRD), count(factNOTRealDestructor/1, FNRD),
    loginfo('Guessed real destructors '), loginfo(GRD), loginfo(' of '), loginfo(FRD),
    loginfo(', NOT: '), loginfo(GNRD), loginfo(' of '), loginfoln(FNRD),

    count(guessedDeletingDestructor/1, GDD), count(factDeletingDestructor/1, FDD),
    count(guessedNOTDeletingDestructor/1, GNDD), count(factNOTDeletingDestructor/1, FNDD),
    loginfo('Guessed deleting destructors '), loginfo(GDD), loginfo(' of '), loginfo(FDD),
    loginfo(', NOT: '), loginfo(GNDD), loginfo(' of '), loginfoln(FNDD),

    count(guessedVirtualFunctionCall/5, GVFC), count(factVirtualFunctionCall/5, FVFC),
    count(guessedNOTVirtualFunctionCall/5, GNVFC), count(factNOTVirtualFunctionCall/5, FNVFC),
    loginfo('Guessed virtual function calls '), loginfo(GVFC), loginfo(' of '), loginfo(FVFC),
    loginfo(', NOT: '), loginfo(GNVFC), loginfo(' of '), loginfoln(FNVFC),

    count(guessedVFTable/1, GVFT), count(factVFTable/1, FVFT),
    count(guessedNOTVFTable/1, GNVFT), count(factNOTVFTable/1, FNVFT),
    loginfo('Guessed virtual function tables '), loginfo(GVFT), loginfo(' of '), loginfo(FVFT),
    loginfo(', NOT: '), loginfo(GNVFT), loginfo(' of '), loginfoln(FNVFT),

    count(guessedVBTable/1, GVBT), count(factVBTable/1, FVBT),
    count(guessedNOTVBTable/1, GNVBT), count(factNOTVBTable/1, FNVBT),
    loginfo('Guessed virtual base tables '), loginfo(GVBT), loginfo(' of '), loginfo(FVBT),
    loginfo(', NOT: '), loginfo(GNVBT), loginfo(' of '), loginfoln(FNVBT),

    count(guessedVFTableEntry/3, GVFTE), count(factVFTableEntry/3, FVFTE),
    count(guessedNOTVFTableEntry/3, GNVFTE), count(factNOTVFTableEntry/3, FNVFTE),
    loginfo('Guessed virtual function table entries '), loginfo(GVFTE), loginfo(' of '), loginfo(FVFTE),
    loginfo(', NOT: '), loginfo(GNVFTE), loginfo(' of '), loginfoln(FNVFTE),

    count(guessedDerivedClass/3, GDC), count(factDerivedClass/3, FDC),
    count(guessedNOTDerivedClass/3, GNDC), count(factNOTDerivedClass/3, FNDC),
    loginfo('Guessed derived classes '), loginfo(GDC), loginfo(' of '), loginfo(FDC),
    loginfo(', NOT: '), loginfo(GNDC), loginfo(' of '), loginfoln(FNDC),

    count(guessedEmbeddedObject/3, GEO), count(factEmbeddedObject/3, FEO),
    count(guessedNOTEmbeddedObject/3, GNEO), count(factNOTEmbeddedObject/3, FNEO),
    loginfo('Guessed embedded objects '), loginfo(GEO), loginfo(' of '), loginfo(FEO),
    loginfo(', NOT: '), loginfo(GNEO), loginfo(' of '), loginfoln(FNEO),

    count(guessedClassHasUnknownBase/1, GUBC), count(factClassHasUnknownBase/1, FUBC),
    count(guessedClassHasNoBase/1, GNBC), count(factClassHasNoBase/1, FNBC),
    loginfo('Guessed has a base class '), loginfo(GUBC), loginfo(' of '), loginfo(FUBC),
    loginfo(', NOT: '), loginfo(GNBC), loginfo(' of '), loginfoln(FNBC),

    %% count(guessedMergeClasses/2, GMC), count(factMergeClasses/2, FMC),
    %% count(guessedNOTMergeClasses/2, GNMC), count(factNOTMergeClasses/2, FNMC),
    %% loginfo('Guessed class mergers '), loginfo(GMC), loginfo(' of '), loginfo(FMC),
    %% loginfo(', NOT: '), loginfo(GNMC), loginfo(' of '), loginfoln(FNMC),

    true.

/* Local Variables:   */
/* mode: prolog       */
/* fill-column:    95 */
/* comment-column: 0  */
/* End:               */
